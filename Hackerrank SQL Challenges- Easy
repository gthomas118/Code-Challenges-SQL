04/14/2024

**Challenge 1**

[Japan Population](https://hackerrank-challenge-pdfs.s3.amazonaws.com/8340-japan-population-English?response-content-disposition=inline%3B%20filename%3Djapan-population-English.pdf&response-content-type=application%2Fpdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAR6O7GJNX5DNFO3PV%2F20240414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240414T175959Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=372c6b4ce2d69c1759e347202f06b0204ce539558ac8f943614027baac51e327)

SQL Input:

SELECT SUM(population)
FROM city
WHERE countrycode = 'JPN';

>[!NOTE]
> Used SUM() function to calculate the total population of Japan paired with the WHERE function to filter to ensure only cities with a JAPAN country code are used in the calculation. 

**Challenge 2**

[Population Density Difference](https://hackerrank-challenge-pdfs.s3.amazonaws.com/8341-population-density-difference-English?response-content-disposition=inline%3B%20filename%3Dpopulation-density-difference-English.pdf&response-content-type=application%2Fpdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAR6O7GJNX5DNFO3PV%2F20240414%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240414T181611Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=5d52169595ff515046406d5c738e6e2afb0a2237ad5e5b24692af6e01602dd8a)

SQL Input:

SELECT MAX(population) - MIN(population) 
FROM city;

>[!NOTE]
> USED MAX() and MIN() functions to subtract the largest population from the smallest population in order to display the difference between both. 

**Challenge 3**

[The Blunder](https://hackerrank-challenge-pdfs.s3.amazonaws.com/12893-the-blunder-English?response-content-disposition=inline%3B%20filename%3Dthe-blunder-English.pdf&response-content-type=application%2Fpdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAR6O7GJNX5DNFO3PV%2F20240416%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240416T024737Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=1073af4cbb1fff821abd0029f6b97ada13ff35ae39394e806448d4c30638bc84)

SQL Input:

SELECT CEIL(AVG(salary) - AVG(CAST(REPLACE(salary, 0, '')AS DECIMAL)))
FROM employees;

>[!NOTE]
> Used CEIL() to round up to the next integer while finding the average salary.
> Calculated the average salary while replacing the '0' in the values while using CAST to change the calculation to a decimal. 
> Subtracted the average without the zeros from the correct average to get the amount of error. 

**Challenge 4**

[Top Earners](https://hackerrank-challenge-pdfs.s3.amazonaws.com/19631-earnings-of-employees-English?response-content-disposition=inline%3B%20filename%3Dearnings-of-employees-English.pdf&response-content-type=application%2Fpdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAR6O7GJNX5DNFO3PV%2F20240417%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240417T233504Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=48bb294dc2b1bdfa988442f0942e5b8e514a320b73fa3cf0a753b00ef943737e)

SQL Input:

SELECT months * salary, COUNT(*)
FROM Employee
GROUP BY months * salary
ORDER BY months * salary Desc
LIMIT 1;

>[!NOTE]
> Calculated the earnings of each employee as well as the count of each employee
> Grouped by the calculated earnings amount and ordered by the calculated earnings amount in Descending order so the largest amount will be at the top. 
> Limited the results to the first row which provides us with the highest calculated salary and the count of employees who have that salary. 

**Challenge **

[]()

SQL Input:



>[!NOTE]
>
